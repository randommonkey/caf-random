
library(shiny)
library(shinyjs)
library(tidyverse)
library(datafringe)
library(hgchmagic)
library(geojsonio)
library(geodata)
library(lfltmagic)
library(leaflet.minicharts)
library(RSQLite)



lang <- getOption("highcharter.lang")
lang$thousandsSep <- ","
lang$numericSymbols <- highcharter::JS("null")
options(highcharter.lang = lang)
# Bases de datos ----------------------------------------------------------


dic_ind <- read_csv('data/diccionarios/indexCat.csv')
codigos <- read_csv('data/diccionarios/codigos.csv')

db <- src_sqlite("data/bases/db.sqlite3")
subjDat <-  tbl(db, sql("SELECT * FROM subjetivos_comparada_data"))
#subjDat <- subjDat %>% select(-PON)
objDat <-  tbl(db, sql("SELECT * FROM objetivos_comparada_data"))
objDat <- objDat %>% select(CIUDAD = Ciudad, AÑO = Año, everything())

dicSbj <- tbl(db, sql("SELECT * FROM subjetivos_comparada_dic_")) %>% collect()
dicObj <- tbl(db, sql("SELECT * FROM objetivos_comparada_dic_")) %>% collect()
dicObj$id[dicObj$id == 'Ciudad'] <- 'CIUDAD'
dicObj$id[dicObj$id == 'Año'] <- 'AÑO'

temSub <- dicSbj %>% select(Tema) %>% distinct()
temObj <- dicObj %>% select(Tema) %>% distinct()
temCom <- inner_join(temSub, temObj) %>% drop_na()
temCom <- unique(temCom$Tema)


# ips <- read_csv('data/bases/ips_interciudades_resultados_data.csv')
# 
# ips_dic <- read_csv('data/bases/ips_interciudades_resultados_dic_.csv')
# ips_dic <- ips_dic %>% filter(ctype == 'Num')
# Funcions generales ------------------------------------------------------

changeNames <- function(data) {
  f <- fringe(data)
  f$d
}


# Botones -----------------------------------------------------------------

BotonesGenerales <- function(dic, cscl){
  
  dic$id_tema <- iconv(gsub(' ', '_', tolower(dic$Tema)), to="ASCII//TRANSLIT")
  dic$Tema_Mod <- stringi::stri_trans_totitle(tolower(dic$Tema))
  dic <- dic %>% drop_na(Tema) 
  
 temas <- unique(dic$id_tema)
  
  map(temas, function(z){
              HTML( paste0(
                           tags$button(id = z, class = cscl, type = "button",
                           tags$img(src = paste0('img/temas/',z, '.png') , class =  'cosa'), #paste0('img/',z, '.png')
                          dic$Tema_Mod[dic$id_tema == z][1]
                                      ),

        paste0("
        <script type='text/javascript'>
          document.querySelector('.",cscl,"').classList.add('pressed');
          document.querySelector('.cosa').classList.add('inverse');
      	</script>
      "
    )
    ))
  

  })
  
}


BotonesGraficas <- function(nombres, clase = "buttonStyleGraph"){
  map(nombres, function(z){
      tags$button(id = z, class = clase, type = "button",
                  tags$img(src = paste0('img/viz/',z, '.png'))
      )
                  
      })
}


# Selector Variables ------------------------------------------------------

selectorVar <- function(dic, var, id_sel) {
  
  dic$id_tema <- iconv(gsub(' ', '_', tolower(dic$Tema)), to="ASCII//TRANSLIT")
  dic$Tema_Mod <- stringi::stri_trans_totitle(tolower(dic$Tema))
  dic <- dic %>% drop_na(Tema) 
  
  
  varSelecc <- if (is.null(var)){
               unique(dic$id_tema)[1]} else{
                 var
               }
  
  variables <- dic %>%
                select(id, label, Tema, id_tema) %>% 
                 filter(id_tema == varSelecc)
  
  
  variables <-  as.list(setNames(variables$id, variables$label))
  
  selectizeInput(id_sel, 'Selección de variables', variables)
  
}


selectorAnio <- function(data, variable, id_selector){
 
  df <- data %>% 
          select_('AÑO', variable) %>% 
            collect() %>% 
             drop_na_(variable) 
  anios <- sort(as.numeric(unique(df$AÑO)))
  #sliderInput(id_selector, 'Tiempo', min = min(anios), max = max(anios), value = anios[length(anios)] )
  selectizeInput(inputId = id_selector, label = 'Tiempo', choices = anios, selected = max(anios))
  }


dicCiudad <- function(id_ci, data, dic){
  
  if(is.null(id_ci)) return()
  
  df <- data %>% filter(CIUDAD == id_ci) %>% collect()
  df <- Filter(function(x)!all(is.na(x)), df)
  varInf <- data.frame(id = names(df))
  dic <- varInf %>% left_join(dic)
  dic
}


BaseGeneral <- function(idElg, data, anioElg){

subjData <- data %>% 
             select_('CIUDAD', 'AÑO', 'PON', idElg) %>%
               collect() %>% 
                 drop_na(idElg) %>% 
                   group_by_('CIUDAD', 'AÑO', idElg) %>% 
                     summarise(total = sum(PON)) %>% 
                      mutate(prop = total/sum(total)) %>% filter(AÑO %in% anioElg) 


subjData <- changeNames(subjData)

subjData <- subjData %>% left_join(dic_ind)
subjData$index[is.na(subjData$index)] <- 'z'
subjData$index <- paste0(subjData$index, subjData$c)
subjData
}

BaseGeneralCiudad <- function(idElg, data, anioElg){
  
  subjData <- data %>% 
    select_('CIUDAD', 'AÑO', 'PON', idElg) %>%
    collect() %>% 
    drop_na(idElg) %>% 
    group_by_('CIUDAD', 'AÑO', idElg) %>% 
    summarise(total = sum(PON)) %>% 
    mutate(prop = total/sum(total)) 
  
  
  subjData <- changeNames(subjData)
  
  subjData <- subjData %>% left_join(dic_ind)
  subjData$index[is.na(subjData$index)] <- 'z'
  subjData$index <- paste0(subjData$index, subjData$c)
  subjData
}



# Tema de gráficos --------------------------------------------------------
paleta <- c('#00cef6', '#26327e', '#d4dd23', '#db3b4a', '#9dcf9c', '#d0854e', '#d8e0e8', '#7919eb', '#71c9c6', '#d6c5a0')

cid_theme <- hc_theme(
  colors = paleta,
  chart = list(
    backgroundColor = "white",
    style = list(
      fontFamily= 'Karla'
    )
  ),
  legend = list(
    itemStyle = list(
      fontFamily = '',
      color = 'black'
    )
  )
)



ips_theme <- function(paleta) {
  hc_theme(
  colors = paleta,
  chart = list(
    backgroundColor = "white",
    style = list(
      fontFamily= 'Karla'
    )
  ),
  legend = list(
    itemStyle = list(
      fontFamily = '',
      color = 'black'
    )
  )
)
}

# Gráficos variables categoricas subjetivos por variable ------------------

# Stack
 
stackGraph <- function(df, horLabel){

  if (is.null(df)) return()
  if (is.null(horLabel)) return()
  
  df$d <- round(df$d, 0)
  
  hc <- hchart(df, type = "bar", hcaes(x = a, y = d, group = index)) %>% 
         hc_plotOptions(bar = list(stacking = "percent")) %>% 
          hc_legend( 
           labelFormatter =  JS("function () {
                                 return this.name.substr(1);
                                 }")) %>%
            hc_xAxis(title = list(text = '')) %>% 
              hc_yAxis(title = list(text = ''), 
                       labels = list(format = "{value}%")) %>% 
                hc_tooltip(headerFormat = "", 
                           pointFormat = paste0("<b>{point.a}</b><br/>", 
                                         horLabel, "<br/>
                                         <b>{point.c} </b>: {point.d} ({point.percentage:.1f}%)")) 
  hc %>% hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE) 
  
}

# Treemap

# hgch_treemap_CatCatNum

# Mapa

mapLef <-  leaflet(data = topojson_read("data/mapa/colombia.topojson")) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -72, lat = 4.85, zoom = 6) %>%
  addPolygons(weight = 1.2,
              color = "#D8E0E7",
              opacity = 1,
              fillColor = "transparent",
              highlight = highlightOptions(sendToBack = TRUE))

mapaSubj <- function(df, colores) {
  
  vars <- unique(df$c)
  df$e <- round(df$e * 100, 1)
  df <- df %>% select(a, c, e) %>% spread(c, e)
  # 
  df <- df %>% left_join(codigos)
  #
  
    mapLef %>%
      clearMinicharts() %>% 
      clearControls() %>%  
    addMinicharts(
      df$lng, df$lat,
      chartdata = df[, c(vars)],
      colorPalette = colores,
      legend = TRUE
    )

}

# Lineas
vizLineCiudad <- function(df, horlabel) {
  
  hc <- hchart(df, type = "line", hcaes(x = b, y = d, group = index)) %>% 
         hc_plotOptions(series = list(marker = list(enabled = TRUE, symbol = "circle"))) %>% 
    hc_legend( 
      labelFormatter =  JS("function () {
                                 return this.name.substr(1);
                                 }")) %>%
    hc_xAxis(title = list(text = '')) %>% 
    hc_yAxis(title = list(text = '')) %>% 
          hc_tooltip(headerFormat = "",
                     pointFormat = paste0("<b>{point.a}</b><br/>",
                                     horlabel, "<br/>
                                         <b>{point.c} </b>: {point.d} ({point.percentage:.1f}%)"))
  
  hc %>% hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)
  
}


# treemap 

vizTreeCiudad <- function(df, horlabel, minColor = "#E63917", maxColor = "#18941E"){
  hc <- hchart(df, "treemap", hcaes(x = c, value = e, color = e)) %>% 
           hc_colorAxis(maxColor = maxColor,  minColor = minColor) %>%
          hc_tooltip(pointFormat = paste0("<b>{point.a}</b><br/>",
                                          horlabel, "<br/>
                                         <b>{point.c} </b>: {point.d} ({point.percentage:.1f}%)"))
 hc  %>% hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)

}

# Stack city 

vizStackCiudad <- function(df, horlabel) {
  df$d <- round(df$d)
  hc <- hchart(df, type = "bar", hcaes(x = b, y = e, group = index)) %>% 
         hc_plotOptions(bar = list(stacking = "percent")) %>% 
          hc_legend( 
            labelFormatter =  JS("function () {
                                 return this.name.substr(1);
                                 }")) %>%
    hc_xAxis(title = list(text = '')) %>% 
    hc_yAxis(title = list(text = ''),
             labels = list(format = "{value}%")) %>%
    hc_tooltip(headerFormat = "",
               pointFormat = paste0("<b>{point.a}</b><br/>",
                                    horlabel, "<br/>
                                         <b>{point.c} </b>: {point.d} ({point.percentage:.1f}%)"))
   hc %>% hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)
  
}



# Bases objetivos ---------------------------------------------------------

BaseGeneralObj <- function(idElg, data){
  
  objData <- data %>% 
    select_('CIUDAD', 'AÑO', idElg) %>%
    collect() %>% 
    drop_na() 
  
  format <- dicObj$ctype[dicObj$id == idElg] 
  
  objData <- changeNames(objData)
  
  if (format == 'Pct') {
    objData$formato <- paste0((objData$c)*100, '%')
    objData$est <- objData$c * 100} else {
    objData$formato <- objData$c    
    objData$est <- objData$c 
    }
  
  
  objData
}


vizLineObje <- function(df, horlabel) {
  
  df$b <- as.numeric(df$b)
  
  hc <- hchart(df, type = "line", hcaes(x = b, y = est, group = a)) %>% 
           hc_plotOptions(series = list(marker = list(enabled = TRUE, 
                                        symbol = "circle"))) %>% 
             hc_tooltip(headerFormat = "", 
                pointFormat = paste0("<b>{point.a}</b><br/>", 
                                      horlabel, ": {point.formato}")) %>% 
    hc_xAxis(title = list(text = '')) %>% 
    hc_yAxis(title = list(text = horlabel))
  hc %>% hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)
  
}


vizLineEOT <- function(df, horlabel) {
  
  df$b <- as.factor(df$b)
  
  hc <- hchart(df, type = "line", hcaes(x = b, y = est, group = a)) %>% 
    hc_plotOptions(series = list(marker = list(enabled = TRUE, 
                                               symbol = "circle"))) %>% 
    hc_tooltip(headerFormat = "", 
               pointFormat = paste0("<b>{point.a}</b><br/>", 
                                    horlabel, ": {point.formato}")) %>% 
    hc_xAxis(title = list(text = '')) %>% 
    hc_yAxis(title = list(text = horlabel))
  hc %>% hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)
  
}


vizTreeObje <- function(df, horlabel, minColor = "#E63917", maxColor = "#18941E"){
  hc <- hchart(df, "treemap", hcaes(x = a, value = est, color = est)) %>% 
    hc_colorAxis(maxColor = maxColor,  minColor = minColor) %>%
    hc_tooltip(pointFormat = paste0("<b>{point.a}</b><br/>",
                                    horlabel, ": {point.formato}"))
  hc  %>% hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)
  
}

vizBarObje <-  function(df, verlabel) {
  df$b <- as.numeric(df$b)
  df <- df %>% dplyr::arrange(desc(est)) %>% drop_na()
  hc <- hchart(df, type = "bar", hcaes(x = a, y = est)) %>%  
    hc_tooltip(headerFormat = "",
               pointFormat = paste0("<b>{point.a}</b><br/>",
                                    verlabel, ": {point.formato}")) %>%
     hc_xAxis(title = list(text = '')) %>% 
     hc_yAxis(title = list(text = verlabel))
   hc %>% hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)
  
}

vizMapObj <- function(df, horlabel) {
 
  # domMin <- min(df$c)
  # domMax <- max(df$c)
  # mypalette <-  colorBin( palette="Dark2", domain=domMin:domMax, na.color="transparent", bins = 5)
  mytext <- paste0(df$a, "<br/>", horlabel, ': ', df$formato) %>%
            lapply(htmltools::HTML)
  df <- df %>% select(lng, lat, est)

    leaflet(data = df) %>%
    addProviderTiles(providers$CartoDB.Positron) %>%
    setView(lng = -72, lat = 4.85, zoom = 6) %>%
      addCircleMarkers(lat = ~as.numeric(lat), 
                       lng = ~as.numeric(lng), 
                       weight = 3, radius = ~scales::rescale(sqrt(est),
                       to = c(5, 25)),
                       #fillColor = ~mypalette(c), fillOpacity = 0.7, color="white", radius=8, stroke=FALSE,
                       label = mytext,
                       color = '#26327e',
                       labelOptions = labelOptions( style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "13px", direction = "auto")
      ) #%>%
      #addLegend( pal=mypalette, values=~c, title = horlabel, opacity=0.9, position = "bottomright" )
    
}

## Line subj cruces 

linesubjCru <- function (data) {
  f <- fringe(data)
  nms <- getClabels(f)
  d <- f$d
  d$lab <- substring(d$a, 2)
  d$format <- paste0(round(d$c, 1), '%')
  horLabel <- nms[2]
  verLabel <- nms[1]
  
  hc <- hchart(d, type = "line", hcaes(x = b, y = c, group = a)) %>% 
    hc_legend( 
      labelFormatter =  JS("function () {
                                 return this.name.substr(1);
                                 }")) %>% 
    hc_plotOptions(series = list(marker = list(enabled = TRUE, 
                                               symbol = "circle"))) %>%
    hc_tooltip(headerFormat = "",
               pointFormat = paste0("<b>{point.lab}</b><br/>", 
                                    verLabel, ": <b>{point.format} </b>")) %>% 
    hc_xAxis(title = list(text = '')) %>% 
    hc_yAxis(title = list(text = verLabel)) %>% 
    hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)
  
  hc
}

barsubjCru <- function (data) {
  f <- fringe(data)
  nms <- getClabels(f)
  d <- f$d
  d <- d %>% tidyr::drop_na()
  d$format <- paste0(round(d$b, 1), '%')
  d$lab <- substring(d$a, 2)
  horLabel <- nms[2]
  verLabel <- nms[1]
  
  hc <- hchart(d, type = "column", hcaes(x = a, y = b)) %>%
    hc_legend( 
      labelFormatter =  JS("function () {
                                 return this.name.substr(1);
                                 }")) %>% 
    hc_tooltip(headerFormat = "",
               pointFormat = paste0("<b>{point.lab}</b><br/>", 
                                    verLabel, ": <b>{point.format} </b>")) %>% 
    hc_xAxis(title = list(text = '')) %>% 
    hc_yAxis(title = list(text = verLabel)) %>% 
    hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)

  hc
}

crucLineObje <- function(df, horlabel) {
  
  hc <- hchart(df, type = "line", hcaes(x = a, y = est)) %>% 
    hc_plotOptions(series = list(marker = list(enabled = TRUE, 
                                               symbol = "circle"))) %>% 
    hc_tooltip(headerFormat = "", 
               pointFormat = paste0("<b>{point.a}</b><br/>", 
                                    horlabel, ": {point.formato}")) %>% 
    hc_xAxis(title = list(text = '')) %>% 
    hc_yAxis(title = list(text = horlabel))
  hc %>% hc_add_theme(custom_theme(custom = cid_theme)) %>%   hc_exporting(enabled = TRUE)
  
}

# bubbles ODS

# bubbles <- function(df, horLabel, caption){
#   df$Valor <- rescale(df$Valor, to = c(5, 30))
#   ncircles <- dim(df)[1]
#   lim_inf = -100
#   lim_sup = 100
#   limits <- c(lim_inf , lim_sup)
#   sep = 7
#   inset <- diff(limits) / sep
#   
#   #set.seed(7321)
#   
#   df$x <- runif(ncircles, min(limits) + inset, max(limits) - inset)
#   df$y <- runif(ncircles, min(limits) + inset, max(limits) - inset)
#   
#   df <- df %>%  select(Ciudad, x, y, Valor)
#   df <- changeNames(df)
#   df$d <- round(df$d, 2)
#   hchart(df, type = "bubble", hcaes(x = b, y = c, size = d, group = a)) %>% 
#     hc_plotOptions(style= list(
#       fontSize= '2em',
#       whiteSpace = "nowrap",
#       textShadow = FALSE,
#       textOutline= FALSE
#     )) %>% 
#     hc_tooltip(headerFormat = "", 
#                pointFormat = paste0("<b> {point.a}</b><br/><b>", 
#                                     horLabel, "</b>: {point.d}"))  %>% 
#     hc_xAxis(gridLineColor= 'transparent',
#              visible=FALSE,
#              title = list(text = '')
#     ) %>%
#     hc_yAxis(gridLineColor= 'transparent',
#              title = list(text = ''),
#              visible=FALSE
#     ) %>% 
#     hc_add_theme(custom_theme(custom = cid_theme)) %>% 
#     hc_credits(enabled = TRUE, 
#                text = paste0(caption, ' (Año 2015).'))
#   
# }


# grafica ficha IPS
stcIPS <- function(datGra) {

hchart(datGra, type = "bar", 
       hcaes(x = ciudad, y = valor, group = labelM, color = colorn)) %>%
  hc_plotOptions(bar = list(stacking = "percent"), 
                 series = list(
                   #borderColor = '#BB1D58',
                   pointWidth= 40,
                   borderWidth = 3,
                   dataLabels = list(
                     enabled = TRUE,
                     format= '<b>{point.label}</b><br/>',
                     align ='left',
                     style= list(
                       fontFamily= '\"Karla\", sans-serif',
                       fontSize= '10px',
                       fontWeight = '100',
                       color='#fff',
                       whiteSpace = "nowrap",
                       textShadow = FALSE,
                       textOutline= FALSE
                     )
                   ))) %>% 
  hc_yAxis( 
    visible=FALSE,
    lineColor='transparent',
    gridLineWidth = 0,
    tickWidth= 0,
    minPadding= 0,
    maxPadding= 0,
    title = list(
      text=''
    ),
    labels = list(
      enabled=FALSE
    )
  ) %>% 
  hc_xAxis( 
    visible=FALSE,
    gridLineWidth = 0,
    title = list(
      text=''
    ),
    labels = list(
      enabled=FALSE
    ),
    tickWidth= 0,
    minPadding= 0,
    maxPadding= 0
  ) %>% 
  hc_legend(
    enabled=FALSE
  ) %>%
  hc_tooltip(headerFormat = "", 
             pointFormat = "<b>{point.label} ({point.Anio}): </b>{point.valor}")  


}

dicIPSciudad <- read_csv('data/diccionarios/ips.csv')


ModBarIps <- function(data, anioS) {
  
  #data$color <- '#26327e'
  #data$color[data$Anio == anioS] <- '#00cef6'
  data$Valor <- as.numeric(data$Valor)
  
  data$color <- ifelse(data$Valor<= 45.5, '#ba7d1b',
                   ifelse(data$Valor > 45.5 & data$Valor <= 57.5, '#d6b277',
                          ifelse(data$Valor > 57.5 & data$Valor <= 66.5, '#2e4c53',
                                 ifelse(data$Valor > 66.5 & data$Valor <= 75.5, '#829499',
                                        ifelse(data$Valor > 75.5 & data$Valor <= 87.5, '#b2cebe', '#2c6444')))))
  
  h <- hchart(data, type = "bar", hcaes(x = Anio, y = Valor, color=color)) %>% 
       hc_tooltip(headerFormt = "",
                  pointFormat = "<b>{point.Variable}: </b>{point.Valor}") %>% 
    hc_xAxis( 
      gridLineWidth = 0,
      title = list(
        text=''
      ),
      tickWidth= 0,
      minPadding= 0,
      maxPadding= 0
    ) %>% 
    hc_yAxis( 
      lineColor='transparent',
      gridLineWidth = 0,
      tickWidth= 0,
      minPadding= 0,
      maxPadding= 0,
      title = list(
        text=''
      )
    ) 
    
  h
}


cruces <- read_csv('data/diccionarios/cruces.csv')



#enableBookmarking(store = "url")
#enableBookmarking(store = "server")
